var imgList = []
var startX = 0
var startY = 0
var elIndex = -1 // 当前被拖拽元素是第几个 也对应着数组的位置
var dragIndex = 0 // 当前拖拽元素 排序后的位置
var dragElOffetTop = 0 // 拖拽元素相对与容器的top
var dragElOffetLeft = 0 // 拖拽元素相对与容器的left
var dragElWidth = 0 // 拖拽元素的大小
var dragElHeight = 0
var wrapWidth = 0 // 容器元素大小
var wrapHeight = 0
var transX = 0
var transY = 0
var curTrans = ''
var activeTouchId = null

var buildSortList = function (newVal, oldVal, ownerInstance, ins) {
  // 数组减少的情况不做处理
  if (oldVal && newVal.length < oldVal.length) return

  // 获取 当前 imgDom的个数 用于分割
  var count = imgList.length
  var divList = ownerInstance.selectAllComponents('.img-item')
  var tempList = divList.slice(count)
  for (var i = 0; i < tempList.length - 1; i++) {
    // el代表这个元素，sort代表元素排列的位置，index代表当前元素的index，它是不会改变的
    imgList.push({ el: tempList[i], sort: i + count, index: i + count })
  }
}

var longPress = function (event, ownerInstance) {
  if (activeTouchId !== null) return
  // 目前拖动位置
  var touch = event.changedTouches[0]
  activeTouchId = touch.identifier
  startX = touch.pageX
  startY = touch.pageY

  var st = ownerInstance.getState()
  // 如果已经在 drag 中则返回, 防止多指触发 drag 动作, touchstart 事件中有效果
  if (st.dragging) return
  st.dragging = true

  // 被拖动的元素
  var ins = event.instance

  // 获取当前元素有没有 transform 过 如果有保存坐标
  var trans = ins.getComputedStyle(['transform']).transform + ''
  var parts = trans.split(',')
  if (parts.length >= 6) {
    transX = parseFloat(parts[4])
    transY = parseFloat(parts[5])
  }

  // 获取容器的位置及大小
  var wrapperEl = ownerInstance
    .selectComponent('#sorContainer')
    .getBoundingClientRect()
  wrapWidth = wrapperEl.width
  wrapHeight = wrapperEl.height
  var wrapTop = wrapperEl.top
  var wrapLeft = wrapperEl.left

  // 保存当前元素的 offetTop 和 offetLeft (相对容器的位置)
  var rect = ins.getBoundingClientRect()
  dragElOffetTop = rect.y - wrapTop - transY
  dragElOffetLeft = rect.x - wrapLeft - transX
  dragElWidth = rect.width
  dragElHeight = rect.height

  // 从元素的Dataset 获取  index
  elIndex = ins.getDataset().index
  // 保存当前元素 拖拽排序后的位置
  dragIndex = imgList[elIndex].sort

  ins.setStyle({
    transform: 'translate3d(' + transX + 'px, ' + transY + 'px, 0)'
  })

  ins.removeClass('trans')
  ins.addClass('moving')

  ownerInstance.callMethod('vibrate')
}

var touchMove = function (event, ownerInstance) {
  var st = ownerInstance.getState()
  // 长按后的拖动才有效果
  if (!st.dragging) return

  var touch = event.changedTouches[0]
  if (touch.identifier !== activeTouchId) return
  var pageX = touch.pageX
  var pageY = touch.pageY

  // 计算可拖拽范围
  var top = dragElOffetTop
  var left = dragElOffetLeft
  var right = wrapWidth - left - dragElWidth
  var bottom = wrapHeight - top - dragElHeight

  var moveX = pageX - startX + transX
  var moveY = pageY - startY + transY

  // 如果超出则 设定为最大值
  // 使用Math.min和Math.max确保moveX和moveY在指定的范围内
  moveX = Math.max(-left, Math.min(right, moveX))
  moveY = Math.max(-top, Math.min(bottom, moveY))

  // 被拖动的元素
  var ins = event.instance
  ins.setStyle({
    transform: 'translate3d(' + moveX + 'px, ' + moveY + 'px, 0)'
  })

  // 计算sort
  var haveMove = reRange(imgList[elIndex], moveX - transX, moveY - transY)
  if (haveMove) ownerInstance.callMethod('vibrate')
  // 移动元素
  moveItem()

  // 不往上冒泡
  return false
}

//重新计算排列顺序
function reRange(item, x, y) {
  var moveIndex // 该移动元素的坐标
  // width表示元素的自身长度以及元素之间距离的和
  moveIndex =
    Math.round(x / dragElWidth) + Math.round(y / dragElWidth) * 3 + dragIndex
  moveIndex = moveIndex < 0 ? 0 : moveIndex // 当移动下标小于0时，将它置为0
  // 当移动下标大于最大值，将它置为最大值
  if (moveIndex > imgList.length - 1) moveIndex = imgList.length - 1

  var currentSort = item.sort
  for (var i = 0; i < imgList.length; i++) {
    if (currentSort < moveIndex) {
      // 从小到大，所有排序-1
      if (imgList[i].sort > currentSort && imgList[i].sort <= moveIndex) {
        imgList[i].sort -= 1
      }
    } else if (currentSort > moveIndex) {
      // 从大到小，所有排序+1
      if (imgList[i].sort < currentSort && imgList[i].sort >= moveIndex) {
        imgList[i].sort += 1
      }
    }
  }
  // 将点击的元素的sort置为moveIndex
  imgList[item.index].sort = moveIndex

  // 位置有变化
  return moveIndex !== currentSort
}

// 排列移动元素
function moveItem() {
  imgList.forEach(function (item) {
    // 获取现在和之前 相对的位置差
    var nowLine = Math.floor(item.sort / 3)
    var beforeLine = Math.floor(item.index / 3)
    var diffLine = nowLine - beforeLine

    var nowIndex = item.sort % 3
    var beforeIndex = item.index % 3
    var diffIndex = nowIndex - beforeIndex
    var trens =
      'translate3d(' +
      diffIndex * dragElWidth +
      'px,' +
      diffLine * dragElWidth +
      'px, 0)'
    // 修改样式
    if (elIndex === item.index) {
      curTrans = trens
    } else {
      item.el.setStyle({ transform: trens })
    }
  })
}

var touchEnd = function (event, ownerInstance) {
  var touch = event.changedTouches[0]
  if (touch.identifier !== activeTouchId) return

  var st = ownerInstance.getState()
  if (!st.dragging) return
  st.dragging = false

  // 被拖动的元素
  var ins = event.instance
  ins.removeClass('moving')
  ins.addClass('trans')
  if (!curTrans) curTrans = 'translate3d(' + transX + 'px, ' + transY + 'px, 0)'
  ins.setStyle({ transform: curTrans })

  // 重置变量
  elIndex = -1
  curTrans = ''
  transX = 0
  transY = 0
  activeTouchId = null
  ownerInstance.callMethod('saveSortList', { newList: imgList })

  return false
}

// 试图重新渲染会重复调用 所以使用flag 避免
var pending = false
var handleDelete = function (index, oldVal, ownerInstance, ins) {
  if (index < 0) {
    pending = false
    return
  }
  if (pending) return
  pending = true
  var delItem
  for (var i = 0; i < imgList.length; i++) {
    if (imgList[i].index === index) {
      delItem = imgList[i]
      break
    }
  }
  imgList.splice(index, 1)
  // 在删除元素后面的都要 -1
  for (var i = 0; i < imgList.length; i++) {
    var item = imgList[i]
    if (item.sort > delItem.sort) item.sort -= 1
    if (item.index > delItem.index) item.index -= 1
  }
  moveItem()
  ownerInstance.callMethod('saveSortList', { newList: imgList })
}

module.exports = {
  longPress: longPress,
  touchMove: touchMove,
  touchEnd: touchEnd,
  buildSortList: buildSortList,
  handleDelete: handleDelete
}
